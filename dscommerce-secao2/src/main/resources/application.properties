# ========================================
# CONFIGURAÇÃO DO NOME DA APLICAÇÃO
# ========================================

# Define o nome da aplicação Spring Boot
# "dscommerce" = nome identificador da sua aplicação
# Usado em logs, métricas, discovery services, etc.
spring.application.name=dscommerce

# EXPLICAÇÃO:
# - Identifica sua aplicação em logs e monitoramento
# - Usado por ferramentas como Spring Cloud para service discovery
# - Aparece em dashboards de monitoramento (Actuator, Micrometer)
# - Facilita identificação em ambientes com múltiplas aplicações

# ========================================
# CONFIGURAÇÃO DE PROFILE ATIVO
# ========================================

# Define qual perfil/ambiente da aplicação está ativo
# "test" = perfil de testes
# Permite ter configurações diferentes para cada ambiente
spring.profiles.active=test

# EXPLICAÇÃO:
# - Profiles permitem ter configurações específicas para cada ambiente
# - Com profile "test", o Spring carrega automaticamente:
#   * application-test.properties (se existir)
#   * Beans anotados com @Profile("test")
#   * Configurações específicas para testes
#
# OUTROS PROFILES COMUNS:
# spring.profiles.active=dev        # Para desenvolvimento
# spring.profiles.active=prod       # Para produção
# spring.profiles.active=staging    # Para homologação

# ========================================
# CONFIGURAÇÃO OPEN-IN-VIEW
# ========================================

# Desabilita o padrão "Open Session in View" do JPA/Hibernate
# false = desliga a funcionalidade (recomendado)
# true = mantém ligado (padrão do Spring Boot, mas problemático)
spring.jpa.open-in-view=false

# EXPLICAÇÃO:
# Open-in-View mantém a sessão do Hibernate aberta durante toda a requisição HTTP
#
# PROBLEMAS quando está LIGADO (true):
# ? Pode causar consultas SQL inesperadas na camada de apresentação (Controller/View)
# ? Lazy loading funciona até na View, mascarando problemas de performance
# ? Conexões com banco ficam abertas por mais tempo
# ? Pode gerar N+1 queries sem você perceber
# ? Dificulta identificar onde exatamente as queries são executadas
#
# VANTAGENS quando está DESLIGADO (false):
# ? Força você a carregar todos os dados necessários na camada de serviço
# ? Queries são executadas apenas onde devem ser (Service/Repository)
# ? Melhor performance e controle sobre